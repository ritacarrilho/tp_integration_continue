name: CI Pipeline

on: [push, pull_request]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint code
      run: |
        # Lint Python code
        pylint app/*.py > pylint-report.txt
        # Lint Dockerfile
        docker run --rm hadolint/hadolint < Dockerfile
        # Lint dependencies
        pip check

    - name: Upload pylint report
      uses: actions/upload-artifact@v2
      with:
        name: pylint-report
        path: pylint-report.txt
        
  unit-tests:
    name: Unit Tests with Coverage
    runs-on: ubuntu-latest
    container: python:3.9
    needs: lint
    
    services:
      tasks-db:
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests with coverage
      env:
        DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@tasks-db/${{ secrets.POSTGRES_DB }}
      run: |
        pytest tests --cov=app --cov-report=xml

    - name: Upload coverage report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: coverage.xml

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Download coverage report
      uses: actions/download-artifact@v2
      with:
        name: coverage-report
        path: .

    - name: Download pylint report
      uses: actions/download-artifact@v2
      with:
        name: pylint-report
        path: .

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io
      with:
        args: |
          -Dsonar.projectKey=YOUR_PROJECT_KEY
          -Dsonar.organization=YOUR_ORGANIZATION_KEY
          -Dsonar.sources=.
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.python.pylint.reportPaths=pylint-report.txt

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: "Show SonarQube Quality Gate Status"
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

    - name: Post comment on commit
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const status = '${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}';
          const comment = `### SonarQube Quality Gate Status\nThe Quality Gate status is **${status}**.`;
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: commitSha,
            body: comment
          });