name: CI Pipeline

on: 
  push:
    branches: 
      - main # Déclenché à chaque nouveau commit sur le main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint code
      run: |
        # Lint Python code
        pylint app/*.py > pylint-report.txt
        # Lint Dockerfile
        docker run --rm hadolint/hadolint < Dockerfile
        # Lint dependencies
        pip check

    - name: Upload pylint report
      uses: actions/upload-artifact@v2
      with:
        name: pylint-report
        path: pylint-report.txt
        
  unit-tests:
    name: Unit Tests with Coverage
    runs-on: ubuntu-latest
    container: python:3.9
    
    services:
      tasks-db:
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests with coverage
      env:
        DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@tasks-db/${{ secrets.POSTGRES_DB }}
      run: |
        pytest tests --cov=app --cov-report=xml:coverage.xml

    - name: Upload coverage report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: coverage.xml

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Download coverage report
      uses: actions/download-artifact@v2
      with:
        name: coverage-report
        path: ./

    - name: Print coverage report
      run: cat coverage.xml

    - name: Adjust coverage paths
      run: |
        sed -i 's|/__w/tp_integration_continue/tp_integration_continue/app|app|g' coverage.xml

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env: 
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=${{ secrets.SONAR_KEY }}
          -Dsonar.organization=${{ secrets.SONAR_ORG }}
          -Dsonar.sources=app
          -Dsonar.tests=tests
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.scm.provider=git

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

    - name: Set Quality Gate Status Output
      id: set-quality-gate-status
      env:
        SONAR_STATUS: ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}
      run: echo "QUALITY_GATE_STATUS=${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" >> $GITHUB_ENV

  # notify:
  #   runs-on: ubuntu-latest
  #   name: Send notification
  #   needs: [sonarqube]

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Get developer info
  #       id: get-email
  #       uses: evvanErb/get-github-email-by-username-action@v1.25
  #       with:
  #         github-username: ${{ github.triggering_actor }}
          
  #     - name: Check the found email and username
  #       run: echo "The email is ${{ steps.get-email.outputs.email }} and the username is ${{ github.triggering_actor }}"

  #     - name: Check status output
  #       run: echo "{{ $SONAR_STATUS }}, {{ env.SONAR_STATUS }} "

  #     - name: Send Notification
  #       env:
  #         SENDGRID_API_KEY: ${{ secrets.SENDGRID }}
  #         EMAIL: ${{ steps.get-email.outputs.email }}
  #         USERNAME: ${{ github.triggering_actor }}
  #         QUALITY_GATE_STATUS: ${{ env.QUALITY_GATE_STATUS }}
  #         REPO_NAME: ${{ github.repository }}
  #         COMMIT_SHA: ${{ github.sha }}
  #         COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
  #       run: |
  #         curl --request POST \
  #           --url ${{ secrets.ENDGRID_HOST }} \ 
  #           --header "Authorization: Bearer $SENDGRID_API_KEY" \
  #           --header "Content-Type: application/json" \
  #           --data '{
  #             "personalizations": [{
  #               "to": [{
  #                 "email": "'"$EMAIL"'"
  #               }],
  #               "subject": "SonarQube Quality Gate Status for '"$REPO_NAME"'"
  #             }],
  #             "from": {
  #               "email": "r.carrilholameira@ecoles-epsi.net"
  #             },
  #             "content": [{
  #               "type": "text/plain",
  #               "value": "Hello '"$USERNAME"',\n\nThe Quality Gate status for your recent push is '"$QUALITY_GATE_STATUS"'.\n\nRepository: '"$REPO_NAME"'\nCommit SHA: '"$COMMIT_SHA"'\nCommit Message: '"$COMMIT_MESSAGE"'\n\nBest regards,\nYour CI Pipeline"
  #             }]
  #           }'

  Merge_test_success:
    name: Merge test success
    runs-on: ubuntu-latest
    needs: [sonarqube]

    steps:
      - name: Initialize Git User
        run: |
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
      
      - name: Check test result
        if: success()  # Si les tests ont réussi
        run: echo "Tests validés"
  
      - name: Checkout code on main
        uses: actions/checkout@v3
        with:
          ref: main
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  
      - name: Update version in files on main
        if: success()
        run: |
          VERSION=$(date +"%Y.%m.%d")-$(git rev-parse --short HEAD)
          echo "Updating version to $VERSION"
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json
  
      - name: Commit updated package.json on main
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git add package.json
          git commit -m "Update version to $VERSION"
          git push --force https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ secrets.NOM_REPOT_GIT }}.git main
  
      - name: Merge main into release
        if: success()  # Si les tests ont réussi
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
            git fetch origin main
            git checkout -B release origin/main
            git push --force https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ secrets.NOM_REPOT_GIT }}.git release
            echo "Force push de la branche main vers release validé"
  
      - name: Check test failure
        if: failure()  # Si une étape précédente a échoué
        run: echo "Tests échoués !"
        
  update-version-and-tag:
    name: Update version and create tag
    runs-on: ubuntu-latest
    needs: [Merge_test_success]
  
    steps:
    - name: Initialize Git User
      run: |
        git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
        git config --global user.name "${{ secrets.GIT_USER_NAME }}"
        
    - name: Checkout code on release
      uses: actions/checkout@v3
      with:
        ref: release
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
    - name: Update version in files on release
      if: success()
      run: |
        VERSION=$(date +"%Y.%m.%d")-$(git rev-parse --short HEAD)
        echo "Updating version to $VERSION"
        sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json

    - name: Commit updated package.json on release
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      run: |
        git add package.json
        git commit -m "Update version to $VERSION"
        git push --force https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ secrets.NOM_REPOT_GIT }}.git release
  
    - name: Create Git tag
      if: success()
      run: |
        git tag -a v1${VERSION} -m "Version ${VERSION}"
        git push --force origin v1${VERSION}
